/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { INavMenu } from "./components/cf-app-header/cf-app-header-menu/cf-app-header-menu";
import { ButtonType, CssUnits, FeedbackType, GutterSize, TableSegment } from "./common/types";
import { CheckboxDirection } from "./components/cf-checkbox-list/cf-checkbox-list";
import { CircularProgressColor, CircularProgressType } from "./components/cf-circular-progress/cf-circular-progress";
import { InputStatusType } from "./components/cf-input/cf-input";
import { TypographyType } from "./components/cf-typography/cf-typography";
import { SideDrawerPosition } from "./components/cf-side-drawer/cf-side-drawer";
import { CellContentPosition } from "./components/cf-table/cf-table-cell/cf-table-cell";
import { TypographyType as TypographyType1 } from "./components/cf-typography/cf-typography";
export namespace Components {
    interface CfAppHeader {
        "appName": string;
        "drawerOpen": boolean;
        "drawerTitle": string;
        "navMenus": INavMenu[];
    }
    interface CfAppHeaderActionMenu {
        "icon": string;
        "menuTitle": string;
    }
    interface CfAppHeaderMenu {
        "active": boolean;
        "link": string;
        "menuTitle": string;
    }
    interface CfButton {
        "disabled": boolean;
        "text": string;
        "type": ButtonType;
    }
    interface CfCard {
        "height": string;
        "padding": GutterSize;
        "width": string;
    }
    interface CfCheckbox {
        "checked": boolean;
    }
    interface CfCheckboxList {
        "direction": CheckboxDirection;
    }
    interface CfChip {
        "addable": boolean;
        "removable": boolean;
        "type": ButtonType;
    }
    interface CfCircularProgress {
        "color": CircularProgressColor;
        "progress": number;
        "type": CircularProgressType;
    }
    interface CfDialog {
        "content": HTMLElement;
        "dialogStyle": CSSStyleDeclaration;
        "dialogTitle": string;
        "footer": HTMLElement;
        "strictClose": boolean;
    }
    interface CfDialogOverlay {
        "show": boolean;
    }
    interface CfDivider {
        "gutterBottom": GutterSize;
    }
    interface CfFooter {
        "fixed": boolean;
    }
    interface CfIconButton {
        "type": ButtonType;
    }
    interface CfInput {
        "label": string;
        "placeholder": string;
        "status": InputStatusType;
        "type": 'number' | 'string';
        "value": any;
    }
    interface CfLink {
        "href": string;
        "newTab": boolean;
        "styles": { [key: string]: string };
        "typographyType": TypographyType;
        "underline": boolean;
    }
    interface CfLoading {
        "message": string;
        "show": boolean;
    }
    interface CfNotification {
    }
    interface CfNotificationMessage {
        "messageTitle": string;
        "type"?: FeedbackType;
    }
    interface CfSideDrawer {
        "drawerTitle": string;
        "position": SideDrawerPosition;
        "visible": boolean;
    }
    interface CfTab {
        "active": boolean;
        "tabId": any;
    }
    interface CfTable {
    }
    interface CfTableBody {
        "bodyHeight": number;
        "rowHeight": number;
        "virtualize": boolean;
    }
    interface CfTableCell {
        "position": CellContentPosition;
        "size": number;
        "type": TableSegment;
    }
    interface CfTableFoot {
    }
    interface CfTableHead {
    }
    interface CfTableRow {
        "type": TableSegment;
    }
    interface CfTabs {
    }
    interface CfTypography {
        "ellipsis": boolean;
        "gutterBottom": GutterSize;
        "type": TypographyType;
    }
    interface CfVirtualScroller {
        "childHeight": number;
        "containerClassName": string;
        "containerHeight": number;
        "cssUnit": CssUnits;
        "innerContainerClassName": string;
        "windowLimit": number;
    }
}
declare global {
    interface HTMLCfAppHeaderElement extends Components.CfAppHeader, HTMLStencilElement {
    }
    var HTMLCfAppHeaderElement: {
        prototype: HTMLCfAppHeaderElement;
        new (): HTMLCfAppHeaderElement;
    };
    interface HTMLCfAppHeaderActionMenuElement extends Components.CfAppHeaderActionMenu, HTMLStencilElement {
    }
    var HTMLCfAppHeaderActionMenuElement: {
        prototype: HTMLCfAppHeaderActionMenuElement;
        new (): HTMLCfAppHeaderActionMenuElement;
    };
    interface HTMLCfAppHeaderMenuElement extends Components.CfAppHeaderMenu, HTMLStencilElement {
    }
    var HTMLCfAppHeaderMenuElement: {
        prototype: HTMLCfAppHeaderMenuElement;
        new (): HTMLCfAppHeaderMenuElement;
    };
    interface HTMLCfButtonElement extends Components.CfButton, HTMLStencilElement {
    }
    var HTMLCfButtonElement: {
        prototype: HTMLCfButtonElement;
        new (): HTMLCfButtonElement;
    };
    interface HTMLCfCardElement extends Components.CfCard, HTMLStencilElement {
    }
    var HTMLCfCardElement: {
        prototype: HTMLCfCardElement;
        new (): HTMLCfCardElement;
    };
    interface HTMLCfCheckboxElement extends Components.CfCheckbox, HTMLStencilElement {
    }
    var HTMLCfCheckboxElement: {
        prototype: HTMLCfCheckboxElement;
        new (): HTMLCfCheckboxElement;
    };
    interface HTMLCfCheckboxListElement extends Components.CfCheckboxList, HTMLStencilElement {
    }
    var HTMLCfCheckboxListElement: {
        prototype: HTMLCfCheckboxListElement;
        new (): HTMLCfCheckboxListElement;
    };
    interface HTMLCfChipElement extends Components.CfChip, HTMLStencilElement {
    }
    var HTMLCfChipElement: {
        prototype: HTMLCfChipElement;
        new (): HTMLCfChipElement;
    };
    interface HTMLCfCircularProgressElement extends Components.CfCircularProgress, HTMLStencilElement {
    }
    var HTMLCfCircularProgressElement: {
        prototype: HTMLCfCircularProgressElement;
        new (): HTMLCfCircularProgressElement;
    };
    interface HTMLCfDialogElement extends Components.CfDialog, HTMLStencilElement {
    }
    var HTMLCfDialogElement: {
        prototype: HTMLCfDialogElement;
        new (): HTMLCfDialogElement;
    };
    interface HTMLCfDialogOverlayElement extends Components.CfDialogOverlay, HTMLStencilElement {
    }
    var HTMLCfDialogOverlayElement: {
        prototype: HTMLCfDialogOverlayElement;
        new (): HTMLCfDialogOverlayElement;
    };
    interface HTMLCfDividerElement extends Components.CfDivider, HTMLStencilElement {
    }
    var HTMLCfDividerElement: {
        prototype: HTMLCfDividerElement;
        new (): HTMLCfDividerElement;
    };
    interface HTMLCfFooterElement extends Components.CfFooter, HTMLStencilElement {
    }
    var HTMLCfFooterElement: {
        prototype: HTMLCfFooterElement;
        new (): HTMLCfFooterElement;
    };
    interface HTMLCfIconButtonElement extends Components.CfIconButton, HTMLStencilElement {
    }
    var HTMLCfIconButtonElement: {
        prototype: HTMLCfIconButtonElement;
        new (): HTMLCfIconButtonElement;
    };
    interface HTMLCfInputElement extends Components.CfInput, HTMLStencilElement {
    }
    var HTMLCfInputElement: {
        prototype: HTMLCfInputElement;
        new (): HTMLCfInputElement;
    };
    interface HTMLCfLinkElement extends Components.CfLink, HTMLStencilElement {
    }
    var HTMLCfLinkElement: {
        prototype: HTMLCfLinkElement;
        new (): HTMLCfLinkElement;
    };
    interface HTMLCfLoadingElement extends Components.CfLoading, HTMLStencilElement {
    }
    var HTMLCfLoadingElement: {
        prototype: HTMLCfLoadingElement;
        new (): HTMLCfLoadingElement;
    };
    interface HTMLCfNotificationElement extends Components.CfNotification, HTMLStencilElement {
    }
    var HTMLCfNotificationElement: {
        prototype: HTMLCfNotificationElement;
        new (): HTMLCfNotificationElement;
    };
    interface HTMLCfNotificationMessageElement extends Components.CfNotificationMessage, HTMLStencilElement {
    }
    var HTMLCfNotificationMessageElement: {
        prototype: HTMLCfNotificationMessageElement;
        new (): HTMLCfNotificationMessageElement;
    };
    interface HTMLCfSideDrawerElement extends Components.CfSideDrawer, HTMLStencilElement {
    }
    var HTMLCfSideDrawerElement: {
        prototype: HTMLCfSideDrawerElement;
        new (): HTMLCfSideDrawerElement;
    };
    interface HTMLCfTabElement extends Components.CfTab, HTMLStencilElement {
    }
    var HTMLCfTabElement: {
        prototype: HTMLCfTabElement;
        new (): HTMLCfTabElement;
    };
    interface HTMLCfTableElement extends Components.CfTable, HTMLStencilElement {
    }
    var HTMLCfTableElement: {
        prototype: HTMLCfTableElement;
        new (): HTMLCfTableElement;
    };
    interface HTMLCfTableBodyElement extends Components.CfTableBody, HTMLStencilElement {
    }
    var HTMLCfTableBodyElement: {
        prototype: HTMLCfTableBodyElement;
        new (): HTMLCfTableBodyElement;
    };
    interface HTMLCfTableCellElement extends Components.CfTableCell, HTMLStencilElement {
    }
    var HTMLCfTableCellElement: {
        prototype: HTMLCfTableCellElement;
        new (): HTMLCfTableCellElement;
    };
    interface HTMLCfTableFootElement extends Components.CfTableFoot, HTMLStencilElement {
    }
    var HTMLCfTableFootElement: {
        prototype: HTMLCfTableFootElement;
        new (): HTMLCfTableFootElement;
    };
    interface HTMLCfTableHeadElement extends Components.CfTableHead, HTMLStencilElement {
    }
    var HTMLCfTableHeadElement: {
        prototype: HTMLCfTableHeadElement;
        new (): HTMLCfTableHeadElement;
    };
    interface HTMLCfTableRowElement extends Components.CfTableRow, HTMLStencilElement {
    }
    var HTMLCfTableRowElement: {
        prototype: HTMLCfTableRowElement;
        new (): HTMLCfTableRowElement;
    };
    interface HTMLCfTabsElement extends Components.CfTabs, HTMLStencilElement {
    }
    var HTMLCfTabsElement: {
        prototype: HTMLCfTabsElement;
        new (): HTMLCfTabsElement;
    };
    interface HTMLCfTypographyElement extends Components.CfTypography, HTMLStencilElement {
    }
    var HTMLCfTypographyElement: {
        prototype: HTMLCfTypographyElement;
        new (): HTMLCfTypographyElement;
    };
    interface HTMLCfVirtualScrollerElement extends Components.CfVirtualScroller, HTMLStencilElement {
    }
    var HTMLCfVirtualScrollerElement: {
        prototype: HTMLCfVirtualScrollerElement;
        new (): HTMLCfVirtualScrollerElement;
    };
    interface HTMLElementTagNameMap {
        "cf-app-header": HTMLCfAppHeaderElement;
        "cf-app-header-action-menu": HTMLCfAppHeaderActionMenuElement;
        "cf-app-header-menu": HTMLCfAppHeaderMenuElement;
        "cf-button": HTMLCfButtonElement;
        "cf-card": HTMLCfCardElement;
        "cf-checkbox": HTMLCfCheckboxElement;
        "cf-checkbox-list": HTMLCfCheckboxListElement;
        "cf-chip": HTMLCfChipElement;
        "cf-circular-progress": HTMLCfCircularProgressElement;
        "cf-dialog": HTMLCfDialogElement;
        "cf-dialog-overlay": HTMLCfDialogOverlayElement;
        "cf-divider": HTMLCfDividerElement;
        "cf-footer": HTMLCfFooterElement;
        "cf-icon-button": HTMLCfIconButtonElement;
        "cf-input": HTMLCfInputElement;
        "cf-link": HTMLCfLinkElement;
        "cf-loading": HTMLCfLoadingElement;
        "cf-notification": HTMLCfNotificationElement;
        "cf-notification-message": HTMLCfNotificationMessageElement;
        "cf-side-drawer": HTMLCfSideDrawerElement;
        "cf-tab": HTMLCfTabElement;
        "cf-table": HTMLCfTableElement;
        "cf-table-body": HTMLCfTableBodyElement;
        "cf-table-cell": HTMLCfTableCellElement;
        "cf-table-foot": HTMLCfTableFootElement;
        "cf-table-head": HTMLCfTableHeadElement;
        "cf-table-row": HTMLCfTableRowElement;
        "cf-tabs": HTMLCfTabsElement;
        "cf-typography": HTMLCfTypographyElement;
        "cf-virtual-scroller": HTMLCfVirtualScrollerElement;
    }
}
declare namespace LocalJSX {
    interface CfAppHeader {
        "appName"?: string;
        "drawerOpen"?: boolean;
        "drawerTitle"?: string;
        "navMenus"?: INavMenu[];
        "onDrawerOpenChange"?: (event: CustomEvent<any>) => void;
    }
    interface CfAppHeaderActionMenu {
        "icon"?: string;
        "menuTitle"?: string;
    }
    interface CfAppHeaderMenu {
        "active"?: boolean;
        "link"?: string;
        "menuTitle"?: string;
    }
    interface CfButton {
        "disabled"?: boolean;
        "text"?: string;
        "type"?: ButtonType;
    }
    interface CfCard {
        "height"?: string;
        "padding"?: GutterSize;
        "width"?: string;
    }
    interface CfCheckbox {
        "checked"?: boolean;
        "onCheckChange"?: (event: CustomEvent<HTMLCfCheckboxElement>) => void;
        "onCheckboxInit"?: (event: CustomEvent<HTMLCfCheckboxElement>) => void;
    }
    interface CfCheckboxList {
        "direction"?: CheckboxDirection;
        "onCheckListChange"?: (event: CustomEvent<any[]>) => void;
    }
    interface CfChip {
        "addable"?: boolean;
        "onClickAdd"?: (event: CustomEvent<any>) => void;
        "onClickRemove"?: (event: CustomEvent<any>) => void;
        "removable"?: boolean;
        "type"?: ButtonType;
    }
    interface CfCircularProgress {
        "color"?: CircularProgressColor;
        "progress"?: number;
        "type"?: CircularProgressType;
    }
    interface CfDialog {
        "content"?: HTMLElement;
        "dialogStyle"?: CSSStyleDeclaration;
        "dialogTitle"?: string;
        "footer"?: HTMLElement;
        "onClose"?: (event: CustomEvent<any>) => void;
        "strictClose"?: boolean;
    }
    interface CfDialogOverlay {
        "show"?: boolean;
    }
    interface CfDivider {
        "gutterBottom"?: GutterSize;
    }
    interface CfFooter {
        "fixed"?: boolean;
    }
    interface CfIconButton {
        "type"?: ButtonType;
    }
    interface CfInput {
        "label"?: string;
        "onValueChange"?: (event: CustomEvent<string>) => void;
        "placeholder"?: string;
        "status"?: InputStatusType;
        "type"?: 'number' | 'string';
        "value"?: any;
    }
    interface CfLink {
        "href"?: string;
        "newTab"?: boolean;
        "styles"?: { [key: string]: string };
        "typographyType"?: TypographyType;
        "underline"?: boolean;
    }
    interface CfLoading {
        "message"?: string;
        "show"?: boolean;
    }
    interface CfNotification {
    }
    interface CfNotificationMessage {
        "messageTitle"?: string;
        "type"?: FeedbackType;
    }
    interface CfSideDrawer {
        "drawerTitle"?: string;
        "onClose"?: (event: CustomEvent<MouseEvent>) => void;
        "position"?: SideDrawerPosition;
        "visible"?: boolean;
    }
    interface CfTab {
        "active"?: boolean;
        "onClickTab"?: (event: CustomEvent<any>) => void;
        "tabId"?: any;
    }
    interface CfTable {
    }
    interface CfTableBody {
        "bodyHeight"?: number;
        "rowHeight"?: number;
        "virtualize"?: boolean;
    }
    interface CfTableCell {
        "onTblCellInit"?: (event: CustomEvent<HTMLCfTableCellElement>) => void;
        "position"?: CellContentPosition;
        "size"?: number;
        "type"?: TableSegment;
    }
    interface CfTableFoot {
    }
    interface CfTableHead {
    }
    interface CfTableRow {
        "onTblRowInit"?: (event: CustomEvent<HTMLCfTableRowElement>) => void;
        "type"?: TableSegment;
    }
    interface CfTabs {
        "onTabSelect"?: (event: CustomEvent<any>) => void;
    }
    interface CfTypography {
        "ellipsis"?: boolean;
        "gutterBottom"?: GutterSize;
        "type"?: TypographyType;
    }
    interface CfVirtualScroller {
        "childHeight"?: number;
        "containerClassName"?: string;
        "containerHeight"?: number;
        "cssUnit"?: CssUnits;
        "innerContainerClassName"?: string;
        "windowLimit"?: number;
    }
    interface IntrinsicElements {
        "cf-app-header": CfAppHeader;
        "cf-app-header-action-menu": CfAppHeaderActionMenu;
        "cf-app-header-menu": CfAppHeaderMenu;
        "cf-button": CfButton;
        "cf-card": CfCard;
        "cf-checkbox": CfCheckbox;
        "cf-checkbox-list": CfCheckboxList;
        "cf-chip": CfChip;
        "cf-circular-progress": CfCircularProgress;
        "cf-dialog": CfDialog;
        "cf-dialog-overlay": CfDialogOverlay;
        "cf-divider": CfDivider;
        "cf-footer": CfFooter;
        "cf-icon-button": CfIconButton;
        "cf-input": CfInput;
        "cf-link": CfLink;
        "cf-loading": CfLoading;
        "cf-notification": CfNotification;
        "cf-notification-message": CfNotificationMessage;
        "cf-side-drawer": CfSideDrawer;
        "cf-tab": CfTab;
        "cf-table": CfTable;
        "cf-table-body": CfTableBody;
        "cf-table-cell": CfTableCell;
        "cf-table-foot": CfTableFoot;
        "cf-table-head": CfTableHead;
        "cf-table-row": CfTableRow;
        "cf-tabs": CfTabs;
        "cf-typography": CfTypography;
        "cf-virtual-scroller": CfVirtualScroller;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cf-app-header": LocalJSX.CfAppHeader & JSXBase.HTMLAttributes<HTMLCfAppHeaderElement>;
            "cf-app-header-action-menu": LocalJSX.CfAppHeaderActionMenu & JSXBase.HTMLAttributes<HTMLCfAppHeaderActionMenuElement>;
            "cf-app-header-menu": LocalJSX.CfAppHeaderMenu & JSXBase.HTMLAttributes<HTMLCfAppHeaderMenuElement>;
            "cf-button": LocalJSX.CfButton & JSXBase.HTMLAttributes<HTMLCfButtonElement>;
            "cf-card": LocalJSX.CfCard & JSXBase.HTMLAttributes<HTMLCfCardElement>;
            "cf-checkbox": LocalJSX.CfCheckbox & JSXBase.HTMLAttributes<HTMLCfCheckboxElement>;
            "cf-checkbox-list": LocalJSX.CfCheckboxList & JSXBase.HTMLAttributes<HTMLCfCheckboxListElement>;
            "cf-chip": LocalJSX.CfChip & JSXBase.HTMLAttributes<HTMLCfChipElement>;
            "cf-circular-progress": LocalJSX.CfCircularProgress & JSXBase.HTMLAttributes<HTMLCfCircularProgressElement>;
            "cf-dialog": LocalJSX.CfDialog & JSXBase.HTMLAttributes<HTMLCfDialogElement>;
            "cf-dialog-overlay": LocalJSX.CfDialogOverlay & JSXBase.HTMLAttributes<HTMLCfDialogOverlayElement>;
            "cf-divider": LocalJSX.CfDivider & JSXBase.HTMLAttributes<HTMLCfDividerElement>;
            "cf-footer": LocalJSX.CfFooter & JSXBase.HTMLAttributes<HTMLCfFooterElement>;
            "cf-icon-button": LocalJSX.CfIconButton & JSXBase.HTMLAttributes<HTMLCfIconButtonElement>;
            "cf-input": LocalJSX.CfInput & JSXBase.HTMLAttributes<HTMLCfInputElement>;
            "cf-link": LocalJSX.CfLink & JSXBase.HTMLAttributes<HTMLCfLinkElement>;
            "cf-loading": LocalJSX.CfLoading & JSXBase.HTMLAttributes<HTMLCfLoadingElement>;
            "cf-notification": LocalJSX.CfNotification & JSXBase.HTMLAttributes<HTMLCfNotificationElement>;
            "cf-notification-message": LocalJSX.CfNotificationMessage & JSXBase.HTMLAttributes<HTMLCfNotificationMessageElement>;
            "cf-side-drawer": LocalJSX.CfSideDrawer & JSXBase.HTMLAttributes<HTMLCfSideDrawerElement>;
            "cf-tab": LocalJSX.CfTab & JSXBase.HTMLAttributes<HTMLCfTabElement>;
            "cf-table": LocalJSX.CfTable & JSXBase.HTMLAttributes<HTMLCfTableElement>;
            "cf-table-body": LocalJSX.CfTableBody & JSXBase.HTMLAttributes<HTMLCfTableBodyElement>;
            "cf-table-cell": LocalJSX.CfTableCell & JSXBase.HTMLAttributes<HTMLCfTableCellElement>;
            "cf-table-foot": LocalJSX.CfTableFoot & JSXBase.HTMLAttributes<HTMLCfTableFootElement>;
            "cf-table-head": LocalJSX.CfTableHead & JSXBase.HTMLAttributes<HTMLCfTableHeadElement>;
            "cf-table-row": LocalJSX.CfTableRow & JSXBase.HTMLAttributes<HTMLCfTableRowElement>;
            "cf-tabs": LocalJSX.CfTabs & JSXBase.HTMLAttributes<HTMLCfTabsElement>;
            "cf-typography": LocalJSX.CfTypography & JSXBase.HTMLAttributes<HTMLCfTypographyElement>;
            "cf-virtual-scroller": LocalJSX.CfVirtualScroller & JSXBase.HTMLAttributes<HTMLCfVirtualScrollerElement>;
        }
    }
}
